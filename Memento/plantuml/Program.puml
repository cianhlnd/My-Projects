@startuml Diagram
class Program {
    {static} Main(args:string[]) : void
    + {static} createSVG(shape:List<Shape>) : string
    + {static} addShape(s:string, canvas:List<Shape>) : void
    {static} displayCanvas(canvas:List<Shape>) : void
    {static} undoShapeCanvas(canvas:List<Shape>, undoRedo:Caretaker) : void
    {static} redoShapeCanvas(canvas:List<Shape>, undoRedo:Caretaker) : void
}
abstract class Shape {
    + name : string <<get>> <<set>>
    + strokeWidth : int <<get>> <<set>>
    + stroke : string <<get>> <<set>>
    + fill : string <<get>> <<set>>
    + <<virtual>> shapeCode() : string
}
class Rectangle {
    + x : int <<get>> <<set>>
    + y : int <<get>> <<set>>
    + w : int <<get>> <<set>>
    + h : int <<get>> <<set>>
    + Rectangle(x:int, y:int, w:int, h:int)
    + <<override>> shapeCode() : string
}
class Circle {
    + cx : int <<get>> <<set>>
    + cy : int <<get>> <<set>>
    + radius : int <<get>> <<set>>
    + Circle(x:int, y:int, r:int)
    + <<override>> shapeCode() : string
}
class Ellipse {
    + cx : int <<get>> <<set>>
    + cy : int <<get>> <<set>>
    + rx : int <<get>> <<set>>
    + ry : int <<get>> <<set>>
    + Ellipse(x:int, y:int, r1:int, r2:int)
    + <<override>> shapeCode() : string
}
class Line {
    + x1 : int <<get>> <<set>>
    + y1 : int <<get>> <<set>>
    + x2 : int <<get>> <<set>>
    + y2 : int <<get>> <<set>>
    + Line(x:int, y:int, a:int, b:int)
    + <<override>> shapeCode() : string
}
class Polyline {
    + coord : string <<get>> <<set>>
    + Polyline(s:string)
    + <<override>> shapeCode() : string
}
class Polygon {
    + coord : string <<get>> <<set>>
    + Polygon(s:string)
    + <<override>> shapeCode() : string
}
class Path {
    + coord : string <<get>> <<set>>
    + Path(s:string)
    + <<override>> shapeCode() : string
}
class Memento {
    + getShape() : Shape
    + setShape(s:Shape) : void
}
class Caretaker {
    + getState() : Memento
    + addState(m:Memento) : void
    + getSize() : int
}
class "List`1"<T> {
}
Shape <|-- Rectangle
Shape <|-- Circle
Shape <|-- Ellipse
Shape <|-- Line
Shape <|-- Polyline
Shape <|-- Polygon
Shape <|-- Path
Memento --> "shape" Shape
Caretaker o-> "undoRedo<Memento>" "List`1"
Caretaker o-> "state" Memento
@enduml
